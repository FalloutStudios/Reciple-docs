---
title: Configuration
---

<script lang="ts">
    import Alert from '$lib/components/Alert.svelte';
</script>

# Configuration
Once you finished setting up your bot, it is not required to modify the config file. But doing so is also fine! Your current Reciple config is located in your bot's root directory with a file name `reciple.mjs`.

> ### Reciple Config
Reciple config allows you to modify some of Reciple's behavior and extend its functions further.

## Token
Your bot token is not directly stored in your config to avoid you leaking your Discord bot token when using git.

```js
export const config = {
    token: process.env.TOKEN ?? ''
};
```

By default, Reciple will create your Discord bot and use the `TOKEN` environment variable to find your Discord bot token.

<Alert type='danger' title='DANGER'>
    It is not recommended to put your Discord bot token directly inside your config file
</Alert>

## Commands
You can also disable certain command types and their functionalies such as cooldowns. Command config also allows you to set which guild the application commands should be registered to.

## Application Commands
The application commands are the context menus and slash commands.

```js
export const config = {
    commands: {
        contextMenuCommand: {
            enabled: true,
            enableCooldown: true,
            acceptRepliedInteractions: false,
            registerCommands: {
                registerGlobally: true,
                registerToGuilds: []
            }
        },
        slashCommand: {
            enabled: true,
            enableCooldown: true,
            acceptRepliedInteractions: false,
            registerCommands: {
                registerGlobally: true,
                registerToGuilds: []
            }
        }
};
```

- `acceptRepliedInteractions` Prevents replied or deffered interaction commands from executing to avoid errors with already replied commands.
- `registerCommands` Allows you to change where these commands are registered.
  - `registerGlobally` Whether to register your commands globally.
  - `registerToGuilds` An array of server ID where these commands should be registered.

## Message Commands
Message commands are triggered with a prefixed messages. These are most commonly known as the traditional commands.

```js
export const config = {
    commands: {
        messageCommand: {
            enabled: true,
            enableCooldown: true,
            commandArgumentSeparator: ' ',
            prefix: '!'
        }
    }
};
```

- `commandArgumentSeparator` The character that separates the arguments of the commands.
- `prefix` The character that is put at the beginning of a message to be considered a command.

### Example Usage of Message Command

<discord-messages>
    <discord-message profile="cat">
        !ping
    </discord-message>
    <discord-message profile="bot">
        <discord-reply profile="cat" slot="reply">
        !ping
        </discord-reply>
        Pong!
    </discord-message>
</discord-messages>

## Application Command Register
Just like the context menu and slash commands' config, you can also configure both with `applicationCommandRegister`.

```js
export const config = {
    enabled: true,
    allowRegisterGlobally: true,
    allowRegisterToGuilds: true,
    registerEmptyCommands: true,
    registerToGuilds: []
};
```

- `allowRegisterGlobally` Allows your application commands to be registered globally. This config will overwrite all application commands' config if set to `false`.
- `allowRegisterToGuilds` Allows your application commands to be registered to guilds. This config will overwrite all application commands' config if set to `false`.
- `registerEmptyCommands` Whether your application should register commands when empty.
- `registerToGuilds` An array of server ID where application commands should be registered. This will not overwrite the existing command config.

## Client

This config lets you modify the Discord.js Client options that contains the intents, cache options, and more.

```js
export const config = {
    client: {
        intents: [
            IntentsBitField.Flags.Guilds,
            IntentsBitField.Flags.GuildMembers,
            IntentsBitField.Flags.GuildMessages,
            IntentsBitField.Flags.MessageContent,
        ]
    }
};
```

> **View [`ClientOptions`](https://discord.js.org/docs/packages/discord.js/14.15.2/ClientOptions:Interface) Docs**

## Logger
This config allows you to configure the [`Logger`](/docs/core/main/classes:Logger).

```js
export const config = {
    enabled: true,
    debugmode: null,
    coloredMessages: true,
    disableLogPrefix: false,
    logToFile: {
        enabled: true,
        logsFolder: './logs',
        file: 'latest.log'
    }
};
```

- `debugmode` Shows some debug messages to the console.
- `coloredMessages` Prints console messages with colors.
- `disableLogPrefix` Disables the time and context prefix of a log message.
- `logToFile` Config for the log files.
  - `logsFolder` The folder where log files are saved.
  - `file` The name of the latest log file.

## Modules
This config allows you to change the directory wher modules are located and what files should be excluded.

```js
export const config = {
    dirs: ['./modules'],
    exclude: [],
    filter: file => true,
    disableModuleVersionCheck: false
};
```

- `dirs` An array of directory names that contains the module files. This config also accepts glob patterns.
- `exclude` An array of file names to exclude from loaded modules. This also accepts wildcard patterns.
- `filter` A function that returns a boolean. This functions filters the module files to be loaded.
- `disableModuleVersionCheck` Whether to check if the module supports the current version of Reciple.

## Preconditions
Preconditions are functions that are executed before a command execution that determines if the execution must continue. Built-in preconditions includes the [`CooldownPrecondition`](/docs/core/main/classes:CooldownPrecondition) and [`CommandPremissionsPermissions`](/docs/core/main/classes:CommandPremissionsPermissions).

```js
export const config = {
    preconditions: [
        CooldownPrecondition.create(),
        CommandPermissionsPrecondition.create()
    ]
};
```

> Create your own preconditions by following the precondition schema [View Docs](/docs/core/main/interfaces:CommandPreconditionData)

## Cooldown Sweeper Options