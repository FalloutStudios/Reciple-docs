---
title: TypeScript
---

# TypeScript
If you want type safety you'll probablity thinking about TypeScript. Reciple support TypeScript because it's written in TypeScript!

## Project Structure
You can create a TypeScript project automatically by choosing TypeScript as the programming language when setting up your bot using `npm create reciple@latest`. This process will create a similar directory structure to the JavaScript one.

```
mybot/
├── reciple.mjs
├── tsconfig.json
├── package.json
├── package-lock.json
├── node_modules/
└── src/
```

When you used the JavaScript project, you'll notice that the `modules` folder is replaced with `src`, that's because TypeScript will automatically generate the JavaScript version of your modules into that directory during transpilation.

## Writting Modules

When writting modules, your modules directory by default is set to `src` and instead of `.js` we will use `.ts`.

```
mybot/
├── reciple.mjs
├── tsconfig.json
├── package.json
├── package-lock.json
├── node_modules/
└── src/
    └── mymodule.ts
```

The way you code your modules might change but not much. For example this is how you would write a Ping command with TypeScript.

```ts
import { AnyCommandResolvable, RecipleModuleData, SlashCommandBuilder } from 'reciple';

export class PingCommand implements RecipleModuleData {
    public versions: string[] = ['^8'];
    public commands: AnyCommandResolvable[] = [
        new SlashCommandBuilder()
            .setName('ping')
            .setDescription('Ping command')
            .setExecute(async ({ interaction }) => {
                await interaction.reply('Pong!');
            })
    ];

    public async onStart(): Promise<boolean> {
        return true;
    }
}

export default new PingCommand();
```

As you can see, It is recommended to explicitly type your properties and function returns.