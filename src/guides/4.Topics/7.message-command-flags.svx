---
title: Message Command Flags
---

<script lang="ts">
    import Alert from '$lib/components/Alert.svelte';
</script>

# Message Command Flags

Reciple provides support for message command flags. This flags are used similar to CLI flags.

## Simple String Flag
```js
import { MessageCommandBuilder } from 'reciple';

new MessageCommandBuilder()
    .setName('test')
    .setDescription('A test command')
    .addFlag(flag => flag
        .setName('flag')
        .setShortcut('f')
        .setDescription('A test flag')
        .setValueType('string')
        .setRequired(true)
    )
    .setExecute(async ({ message, flags }) => {
        const flag = flags.getFlagValues('flag', { required: true })[0];
        await message.reply(`Received: **${flag}**`);
    })
```

### Command Usage
<discord-messages>
    <discord-message profile="cat">
        !test -f Hello
    </discord-message>
    <discord-message profile="bot">
        <discord-reply profile="cat" slot="reply">!test -f Hello</discord-reply>
        Received: <b>Hello</b>
    </discord-message>
</discord-messages>


## Boolean Flag
```js
import { MessageCommandBuilder } from 'reciple';

new MessageCommandBuilder()
    .setName('test')
    .setDescription('A test command')
    .addFlag(flag => flag
        .setName('flag')
        .setShortcut('f')
        .setDescription('A test flag')
        .setValueType('boolean')
        .setRequired(true)
    )
    .setExecute(async ({ message, flags }) => {
        const flag = flags.getFlagValues('flag', { required: true })[0];
        await message.reply(`Received: **${flag}**`);
    })
```

### Command Usage
<discord-messages>
    <discord-message profile="cat">
        !test -f
    </discord-message>
    <discord-message profile="bot">
        <discord-reply profile="cat" slot="reply">!test -f</discord-reply>
        Received: <b>true</b>
    </discord-message>
</discord-messages>

## Validate & Resolve Command Flag Values
You make your own flag value validator and Resolver by using [`MessageCommandFlagBuilder#setValidator()`](/docs/core/main/classes:MessageCommandFlagBuilder#setvalidator) and [`MessageCommandFlagBuilder#setresolvevalue()`](/docs/core/main/classes:MessageCommandFlagBuilder#setresolvevalue)

```js
import { MessageCommandBuilder } from 'reciple';

new MessageCommandBuilder()
    .setName('test')
    .setDescription('A test command')
    .addFlag(flag => flag
        .setName('flag')
        .setShortcut('f')
        .setDescription('A test flag')
        .setValueType('string')
        .setRequired(true)
        .setMultiple(true)
        .setResolveValue(({ values }) => values.map(v => Number(v)))
        .setValidator(({ values }) => values.every(v => !isNaN(Number(v))))
    )
    .setExecute(async ({ message, flags }) => {
        const flag = await flags.getFlagValues('flag', { required: true, resolveValue: true });
        await message.reply(`Received: **${flag.join(', ')}**`);
    })
```

<Alert type='info' title='INFO'>
    When using <a href="/docs/core/main/classes:MessageCommandFlagBuilder#setresolvevalue"><code>setResolveValue</code></a>, you must use <a href="/docs/core/main/classes:MessageCommandFlagManager#getflagvalues"><code>MessageCommandFlagManager#getFlagValues()</code></a> with the <code>resolveValue</code> flag set to <code>true</code>. This will make the return values of the flag a <code>Promise</code> of the resolved value.
</Alert>

### Command Usage
<discord-messages>
    <discord-message profile="cat">
        !test -f 10 -f 20
    </discord-message>
    <discord-message profile="bot">
        <discord-reply profile="cat" slot="reply">!test -f 10</discord-reply>
        Received: <b>10, 20</b>
    </discord-message>
</discord-messages>