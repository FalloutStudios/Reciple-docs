---
title: Cooldowns
---

<script lang="ts">
    import Alert from '$lib/components/Alert.svelte';
</script>

# Cooldowns
Cooldowns are useful for preventing users from repeating the same actions in a short period of time. This guide will explain how to use Reciple cooldowns.

Cooldowns are set by adding the [`.setCooldown()`](/docs/core/main/classes:BaseCommandBuilder#setcooldown) to your command builder when creating your command. For example if you want to make a ping slash command with 5 seconds cooldown we will code it like:
```js
import { SlashCommandBuilder } from 'reciple';

export class MyModule {
    commands = [
        new SlashCommandBuilder()
            .setName('ping')
            .setDescription('Pong command')
            .setCooldown(5 * 1_000)
            .setExecute(async ({ interaction }) => {
                await interaction.reply('Pong!');
            })
    ];

    async onStart() {
        return true;
    }
}

export default new MyModule();
```

<Alert type="info" title="INFO">
    You can use <a href="/docs/core/main/classes:BaseCommandBuilder#setcooldown"><code>.setCooldown()</code></a> on all command builders.
</Alert>

By default, when a user has been cooled-down, the interaction/message is ignored without replying to the command. You can add a cooldown message by using the command halt with [`.setHalt()`](/docs/core/main/classes:BaseCommandBuilder#setHalt).

```js
import { CommandHaltReason, SlashCommandBuilder } from 'reciple';
import { time } from 'discord.js';

export class MyModule {
    commands = [
        new SlashCommandBuilder()
            .setName('ping')
            .setDescription('Pong command')
            .setCooldown(5 * 1_000)
            .setExecute(async ({ interaction }) => {
                await interaction.reply('Pong!');
            })
            .setHalt(async data => {
                const interaction = data.executeData.interaction;

                if (data.reason === CommandHaltReason.Cooldown) {
                    await interaction.reply({
                        content: `You can execute this command again in ${time(data.cooldown.endsAt, 'R')}`,
                        ephemeral: true
                    });
                    return true;
                }
            })
    ];

    async onStart() {
        return true;
    }
}

export default new MyModule();
```

<discord-messages>
    <discord-message profile="bot">
        <discord-command slot="reply" profile="cat" command="/ping"></discord-command>
        Pong!
    </discord-message>
    <discord-message profile="bot" ephemeral>
        <discord-command slot="reply" profile="cat" command="/ping"></discord-command>
        You can execute this command again in <discord-time>4 seconds</discord-time>
    </discord-message>
</discord-messages>