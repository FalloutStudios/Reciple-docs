---
title: Command Halts
---

<script lang="ts">
    import Alert from '$lib/components/Alert.svelte';
</script>

# Command Halts
Command halts are functions that are executed when a command, such as the context menu, message, or slash command, is terminated, cooled-down, or fails to execute.

There are different types of command halts that serves their own purposes.

#### Command Halt Data Types
- [`CommandErrorHaltData`](/docs/core/main/interfaces:CommandErrorHaltData) Used to handle error thrown by the command.
- [`CommandCooldownHaltData`](/docs/core/main/interfaces:CommandCooldownHaltData) Used to handle commands that are cooled-down.
- [`CommandPreconditionTriggerHaltData`](/docs/core/main/interfaces:CommandPreconditionTriggerHaltData) Used to handle a command that has triggered a precondition.
- [`CommandInvalidArgumentsHaltData`](/docs/core/main/interfaces:CommandInvalidArgumentsHaltData) Can only be used with message commands to handle invalid argument error.
- [`CommandMissingArgumentsHaltData`](/docs/core/main/interfaces:CommandMissingArgumentsHaltData) Can only be used with message commands to handle missing argument error.

Command halts are identified using the [`.reason`](/docs/core/main/interfaces:BaseCommandHaltData) property that uses the [`CommandHaltReason`](/docs/core/main/enums:CommandHaltReason) enum.

To create a command halt, create a new file in a folder that is **not** your modules folder. In this case we will use `./halts/error-handler.js`. Inside that file export the command halt data.

```js
import { CommandHaltReason, CommandType } from 'reciple';

export default {
    id: 'my.errorhandler',
    commandTypes: [CommandType.ContextMenuCommands, CommandType.MessageCommand, CommandType.SlashCommands],
    halt: async data => {
        const reply = {
            content: 'An error occured while executing this command',
            ephemeral: true
        };

        switch (data.reason) {
            case CommandHaltReason.Error:
                if (data.commandType === CommandType.MessageCommand) {
                    await data.executeData.message.reply(reply);
                    break;
                }

                const { interaction } = data.executeData;

                if (interaction.deferred) {
                    await interaction.editReply(reply);
                } else if (interaction.replied) {
                    await interaction.followUp(reply);
                } else {
                    await interaction.reply(reply);
                }
        }

        return true;
    }
};
```

`halt` is the function that will handle the command halt.
- Return `true` if the halt is handled
- `false|string|Error` if it fails
- `null|undefined` to pass the command halt trigger to the next command halt.

> Learn more about command halt data structure. [View Docs](/docs/core/main/interfaces:CommandHaltData)

## Global Scope Command Halt

To use the command halt that we made, you can import it in your config file and add it to the `commandHalts` array.

```js
import MyErrorHandler from './halts/error-handler.js';

export const config = {
    /// ...other config...
    commandHalts: [MyErrorHandler]
};
```

## Command Scope Command Halt

Alternatively, you can add it to a single command using the [`.addHalts()`](/docs/core/main/classes:BaseCommandBuilder#addhalts) or [`.setHalts()`](/docs/core/main/classes:BaseCommandBuilder#sethalts) methods.

```js
import { SlashCommandBuilder } from 'reciple';
import MyErrorHandler from '../halts/error-handler.js';

new SlashCommandBuilder()
    .setName('ping')
    .setDescription('Pong command')
    .setPreconditions(MyErrorHandler)
    .setExecute(async ({ interaction }) => {
        await interaction.reply('Pong!');
    })
```

Now, when a command fails, the code above will send a message rather than terminating the bot process.

<discord-messages>
    <discord-message profile="bot" ephemeral>
        <discord-command slot="reply" profile="cat" command="/ping"></discord-command>
        An error occured while executing this command
    </discord-message>
</discord-messages>

> You can disable a global or command scope halts from a command using .addDisabledHalts() or .setDisabledHalts(). Just pass the id of the halt you want to disable to the arguments of this method to not use them.