---
title: Command Halts
---

<script lang="ts">
    import Alert from '$lib/components/Alert.svelte';
</script>

# Command Halts

In reciple, Command halts are functions that are executed when a command such as context menu, message, and slash command has been terminated, cooled-down, or failed executing.

There are different types of command halts that serves their own purposes.

#### Command Halt Data Types
- [`CommandErrorHaltData`](/docs/core/main/interfaces:CommandErrorHaltData) Used to handle error thrown by the command.
- [`CommandCooldownHaltData`](/docs/core/main/interfaces:CommandCooldownHaltData) Used to handle commands that are cooled-down.
- [`CommandPreconditionTriggerHaltData`](/docs/core/main/interfaces:CommandPreconditionTriggerHaltData) Used to handle a command that has a precondition error.
- [`CommandInvalidArgumentsHaltData`](/docs/core/main/interfaces:CommandInvalidArgumentsHaltData) Can only be used with message commands to handle invalid argument error.
- [`CommandMissingArgumentsHaltData`](/docs/core/main/interfaces:CommandMissingArgumentsHaltData) Can only be used with message commands to handle missing argument error.

Command halts are identified using the [`.reason`](/docs/core/main/interfaces:BaseCommandHaltData) property that uses the [`CommandHaltReason`](/docs/core/main/enums:CommandHaltReason) enum.

<Alert type='warning' title='WARNING'>Command halt functions should return <code>true</code> when the action has been resolved.</Alert>

### Error Handling
Command halts allows you to handle error thrown by a command after executing it. This can be applied to all command types.

```js
import { CommandHaltReason, SlashCommandBuilder } from 'reciple';

export class MyModule {
    versions = ['^8'];
    commands = [
        new SlashCommandBuilder()
            .setName('ping')
            .setDescription('Pong command')
            .setExecute(async ({ interaction }) => {
                await interaction.reply('Pong!');
            })
            .setHalt(async data => {
                const interaction = data.executeData.interaction;
                const reply = {
                    content: 'An error occured while executing this command',
                    ephemeral: true
                };

                switch (data.reason) {
                    case CommandHaltReason.Error:
                    case CommandHaltReason.PreconditionTrigger:
                        if (interaction.deferred) {
                            await interaction.editReply(reply);
                        } else if (interaction.replied) {
                            await interaction.followUp(reply);
                        } else {
                            await interaction.reply(reply);
                        }
                }
            })
    ];
}

export default new MyModule();
```

The code above will send a message every time the command fails without terminating the whole bot process.

<discord-messages>
    <discord-message profile="bot" ephemeral>
        <discord-command slot="reply" profile="cat" command="/ping"></discord-command>
        An error occured while executing this command
    </discord-message>
</discord-messages>

## Global Command Halt
To set a global command halt to every commands, you'll need to set halt to every commands that are in the client.

First, make a new module with an event listener that executes when modules are loaded, then join all commands in an array.
```js
export class GlobalCommandHalt {
    versions = ['^8'];

    async onStart() {
        return true;
    }

    async onLoad({ client }) {
        client.modules.on('loadedModules', async () => {
            const commands = [...client.commands.contextMenuCommands.values(), ...client.commands.messageCommands.values(), ...client.commands.slashCommands.values()];
            await this.addHaltToCommands(commands);
        });
    }

    async addHaltToCommands(commands) {}

    async handleCommandHalt(haltData) {}
}

export default new GlobalCommandHalt()
```

After that, implement the method that will add command halt functions to every commands and merge existing halts in that array.
```js
export class GlobalCommandHalt {
    versions = ['^8'];

    async onStart() {
        return true;
    }

    async onLoad({ client }) {
        client.modules.on('loadedModules', async () => {
            const commands = [...client.commands.contextMenuCommands.values(), ...client.commands.messageCommands.values(), ...client.commands.slashCommands.values()];
            await this.addHaltToCommands(commands);
        });
    }

    async addHaltToCommands(commands) {
        for (const command of commands) {
            const originalHalt = command.halt;
            const newHalt = async haltData => {
                const handled = originalHalt ? await originalHalt(haltData) : false;
                if (handled) return true;

                return this.handleCommandHalt(haltData);
            }

            // Apply the halt function
            command.setHalt(newHalt);
        }
    }
}

export default new GlobalCommandHalt()
```

`addHaltToCommands` will loop through the commands and merge the command's halt function if there is one.

Lastly, implement the method that will serve as the global command halt. After this, command halt will be automatically added to your commands.
```js
import { inlineCode, time } from 'discord.js';

export class GlobalCommandHalt {
    versions = ['^8'];

    async onStart() {
        return true;
    }

    async onLoad({ client }) {
        client.modules.on('loadedModules', async () => {
            const commands = [...client.commands.contextMenuCommands.values(), ...client.commands.messageCommands.values(), ...client.commands.slashCommands.values()];
            await this.addHaltToCommands(commands);
        });
    }

    async addHaltToCommands(commands) {
        for (const command of commands) {
            const originalHalt = command.halt;
            const newHalt = async haltData => {
                const handled = originalHalt ? await originalHalt(haltData) : false;
                if (handled) return true;

                return this.handleCommandHalt(haltData);
            }

            // Apply the halt function
            command.setHalt(newHalt);
        }
    }

    async handleCommandHalt(haltData) {
        // Create a reply function
        const createResponse = haltData.commandType === CommandType.MessageCommand
            ? options => haltData.executeData.message.reply(options)
            : haltData.executeData.interaction.deferred
                ? options => haltData.executeData.interaction.editReply(options)
                : haltData.executeData.interaction.replied
                    ? options => haltData.executeData.interaction.followUp(options)
                    : options => haltData.executeData.interaction.reply(options);

        // Create the base of replies
        let replyOptions = { ephemeral: true };

        switch(haltData.reason) {
            case CommandHaltReason.Cooldown:
                replyOptions.content = `Slow down! the command can be used again ${time(haltData.cooldown.endsAt, 'R')}`;
                await createResponse(replyOptions);
                return true;
            case CommandHaltReason.Error:
                replyOptions.content = 'An error occured while executing this command';
                await createResponse(replyOptions);
                return true;
            case CommandHaltReason.InvalidArguments:
                const invalidArgs = haltData.invalidOptions.map(a => inlineCode(a.name));
                replyOptions.content = `Invalid value given to option(s) ${invalidArgs.join(' ')}`;
                await createResponse(replyOptions);
                return true;
            case CommandHaltReason.MissingArguments:
                const missingArgs = haltData.missingOptions.map(a => inlineCode(a.name));
                replyOptions.content = `Missing required argument(s) ${missingArgs.join(' ')}`;
                await createResponse(replyOptions);
                return true;
        }

        return false;
    }
}

export default new GlobalCommandHalt()
```

`handleCommandHalt` is the command halt function which handles all command halt data for all command types such as context menu, message, and slash commands.